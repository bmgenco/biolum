summary(stur.m3)
plot_summs(stur.m2, stur.m3, scale = TRUE, exp = TRUE)
plot(stur$DTSF, stur$SALINITY)
stur.m4 <- glm(CATCH ~ YEAR + TEMP+ DTSF, data = stur, offset = log(Effort), family = "quasipoisson")
summary(stur.m4)
confint(stur.m4)
plot_summs(stur.m3, scale = TRUE, exp = TRUE)
plot_summs(stur.m3, stur.m4, scale = TRUE, exp = TRUE)
glance(stur.m4)
glance(stur.m3)
tidy(stur.m3, exponentiate = TRUE)
tidy(stur.m4, exponentiate = TRUE)
n.sims<-10000 # number of simulations
sim.results.m3<-sim(stur.m3, n.sims)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=14, fig.height=8.5, fig.align = "center")
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
#wd change to working directory on your local machine
wd<-"/home/brandon/Desktop/hw_9_temp/"
knitr::opts_knit$set(root.dir=wd)
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
packages<-c("readr" ,"tidyverse", "msme" , "ggplot2", "lubridate", "arm", "mgcv", "jtools", "broom", "gratia", "cowplot", "ggthemes", "rv")  # set packages here
f.ipak(packages)
rm(f.ipak, packages, wd)
setnsims(10000)# go big or go home
sim.m3<-posterior(stur.m3)
sim.m4<-posterior(stur.m4)
print(sim.m3)
print(sim.m4)
names(sim.m3)
sim.m3$beta
as.m4.hat <- predict(stur.m4, type = "response")
hist(sim.m4$beta, main="Histgram of simulated modle coeffcints")
sim.m4$beta
sim.m4$beta$DTSF
hist(sim.m4$beta$YEAR, main="Varaible: Year -Histgram  of simulated modle coeffcints")
hist(sim.m4$beta$YEAR, main="Varaible: Year - - Histogram of simulated model coefficient, for 10,000 simulations")
hist(sim.m4$beta$TEMP, main="Varaible: Temp - - Histogram of simulated model coefficient, for 10,000 simulations")
hist(sim.m4$beta$DTSF, main="Varaible: DTSF - - Histogram of simulated model coefficient, for 10,000 simulations")
hist(sim.m4$beta$`(Intercept)`, main="Varaible: Intercept- - Histogram of simulated model coefficient, for 10,000 simulations")
hist(sim.m4$sigma, main="Varaible: Year - - Histogram of simulated model coefficient, for 10,000 simulations")
plot(sim.m4$sigma)
sim.m4$sigma
require(graphics)
-log(dpois(0:7, lambda = 1) * gamma(1+ 0:7)) # == 1
Ni <- rpois(50, lambda = 4); table(factor(Ni, 0:max(Ni)))
1 - ppois(10*(15:25), lambda = 100)  # becomes 0 (cancellation)
ppois(10*(15:25), lambda = 100, lower.tail = FALSE)  # no cancellation
par(mfrow = c(2, 1))
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
plot(x, pbinom(x, 100, 0.01), type = "s", ylab = "F(x)",
main = "Binomial(100, 0.01) CDF")
## The (limit) case  lambda = 0 :
stopifnot(identical(dpois(0,0), 1),
identical(ppois(0,0), 1),
identical(qpois(1,0), 0))
n<-dim(stur)[1]# number of observations
y.rep <- rpois(n, predict(stur.m4,type="response"))
y.rep
n<-dim(stur)[1]# number of observations
pred_catch.m3<- rpois(n, predict(stur.m4,type="response"))
pred_catch.m4 <- rpois(n, predict(stur.m4,type="response"))
z.m3<-length(which(pred_catch.m3== 0)) # number of zeros predicted
z.m4<-length(which(pred_catch.m4== 0)) # number of zeros predicted
n<-dim(stur)[1]# number of observations
pred_catch.m3<- rpois(n, predict(stur.m4,type="response"))
pred_catch.m4 <- rpois(n, predict(stur.m4,type="response"))
z.m3<-length(which(pred_catch.m3== 0)) # number of zeros predicted
z.m4<-length(which(pred_catch.m4== 0)) # number of zeros predicted
z.real<-length(which(stur$CATCH== 0))
z.m3
x.m4
z.m4
z.real
?ts()
data("Nile")
rm(list=ls())
data(Nile)
Nile
str(Nile)
p<-30978
t<-290500
p/t
c<-39.5e6
c
c*(p/t)
rm(list=ls())
labserv_data<-("/home/brandon/labserv/Projects/Mercury_Delta/data/ACS/raw_acs/map/2019_10_09")
labserv_wd<-("/home/brandon/labserv/Projects/Mercury_Delta/temp/working_directory_acs_processing")
labserv_out<-("/home/brandon/labserv/Projects/Mercury_Delta/temp/python_test")
ftp<-("ftp://ftpext.usgs.gov/pub/wr/ca/sacramento/O'Donnell/HgFS/")
setwd
setwd(labserv_wd)
dev265<-read.delim("acs265.dev" , head=T, sep ="\t", skip =94, colClasses = "double")
#### acs file ####
#x read file
file<-(file.path(labserv_data, "acs_265_20191009091542_unfilt_1.dat"))
x<-read.delim(file , head=T, sep ="\t", skip =95, colClasses = "double")
x<-x[,-168]
x[,1]<-as.integer(x[,1])
t<-names(x)[2:dim(x)[2]]
acs_wavelengths<-vector("list", 2)
names(acs_wavelengths)<-c("C", "A")
acs_wavelengths[[1]]<-as.numeric(unlist(str_extract_all(t, "(?<=C)[:graph:]{3,5}")))
acs_wavelengths[[2]]<-as.numeric(unlist(str_extract_all(t, "(?<=A)[:graph:]{3,5}")))
rm(t)
origin<-20191009091542# from file name
o<-ymd_hms(origin, tz= "America/Los_Angeles")
x$time<-x[,1]-x[1,1]
x$time<-round(x$time/1000,0)
x$time<-as.POSIXct(x$time, origin=o, tz= "America/Los_Angeles", format="%s")
x<-as_tibble(x)
rm(o, origin)
# y
y<-read_csv("T3_HgFS_October_2019-10-18_BG.csv")
y<-y %>% select('Timestamp (mm/dd/yyyy hh:mm:ss)', 'Temp (˚C) (TSG) HF', 'Salinity (PSU) (TSG) HF', "Latitude (Decimal Degrees)", "Longitude (Decimal Degrees)")
names(y)<-c('time', "temp", "sal", "lat", "lon") # for coding purposes
y$time<-force_tz(y$time, tz="America/Los_Angeles") # chaneg the time zone form utc 00 to pdt
rm(list=ls())
library(tidyverse)
library(Riops)
library(lubridate)
library(readxl)
#library(XML)
library(RCurl)
labserv_data<-("/home/brandon/labserv/Projects/Mercury_Delta/data/ACS/raw_acs/map/2019_10_09")
labserv_wd<-("/home/brandon/labserv/Projects/Mercury_Delta/temp/working_directory_acs_processing")
labserv_out<-("/home/brandon/labserv/Projects/Mercury_Delta/temp/python_test")
ftp<-("ftp://ftpext.usgs.gov/pub/wr/ca/sacramento/O'Donnell/HgFS/")
### files and variables:
# x = acs data - from server
# y = csv of sensor data
# z = time match up -hand created from sver notes or file
# w = coverison file
setwd(labserv_wd)
#### list file on ftp ####
#*improve*
# ftp.files<-getURL(ftp, ftp.use.epsv=FALSE, dirlistonly = TRUE)
# ftp.files1<-getURLContent(ftp, verbose=TRUE, ftp.use.epsv=TRUE, dirlistonly = TRUE)
dev265<-read.delim("acs265.dev" , head=T, sep ="\t", skip =94, colClasses = "double")
### list files
acs_file_names<-list.files(labserv_data, pattern = ".dat") # make sure all acs files are named dat
#### acs file ####
#x read file
file<-(file.path(labserv_data, "acs_265_20191009091542_unfilt_1.dat"))
x<-read.delim(file , head=T, sep ="\t", skip =95, colClasses = "double")
x<-x[,-168]
x[,1]<-as.integer(x[,1])
t<-names(x)[2:dim(x)[2]]
acs_wavelengths<-vector("list", 2)
names(acs_wavelengths)<-c("C", "A")
acs_wavelengths[[1]]<-as.numeric(unlist(str_extract_all(t, "(?<=C)[:graph:]{3,5}")))
acs_wavelengths[[2]]<-as.numeric(unlist(str_extract_all(t, "(?<=A)[:graph:]{3,5}")))
rm(t)
# x - convert date
origin<-20191009091542# from file name
o<-ymd_hms(origin, tz= "America/Los_Angeles")
x$time<-x[,1]-x[1,1]
x$time<-round(x$time/1000,0)
x$time<-as.POSIXct(x$time, origin=o, tz= "America/Los_Angeles", format="%s")
x<-as_tibble(x)
rm(o, origin)
#### read in xlsx have to edit datat frm server -requiresediting nots form start stop times per insturmnet ####
#z<-read_excel("T3_HgFS_October_merged_2019-10-18_BG.xlsx")
##### time match up #####
#*imporve* - acces from list of files
# z
# z<-matrix( nrow = 2, ncol =3)
# z[1,]<-c("10/09/2019", 0915, 1100)
# z[2,]<-c("10/09/2019", 1150, 1326)
# colnames(z)<-c("date", "start", "end")
# z<-as.tibble(z)
# y
y<-read_csv("T3_HgFS_October_2019-10-18_BG.csv")
y<-y %>% select('Timestamp (mm/dd/yyyy hh:mm:ss)', 'Temp (˚C) (TSG) HF', 'Salinity (PSU) (TSG) HF', "Latitude (Decimal Degrees)", "Longitude (Decimal Degrees)")
names(y)<-c('time', "temp", "sal", "lat", "lon") # for coding purposes
y$time<-force_tz(y$time, tz="America/Los_Angeles") # chaneg the time zone form utc 00 to pdt
# y1<-y[1:6,]
# x1<-x[1:6,c(168,2)]
# y<-as.data.frame(y)
# x<-as.data.frame(x)
v<-full_join(x, y)
t2<-v %>% select(., time, temp, sal, lat, lon,  C441.4, A442.6 )
w<-read_table2("265_TS4.cor", col_names = F)
colnames(w)<-c("wavelength", "pure_water psi (1/mC)", "atten c psi (1/mS)", "absorb a psi (1/mS)")
rm(list=ls())
library(spatstat)
library(sp)
data(swedishpines)
swedishpines
X <- swedishpines
plot(X)
summary(X)
summary(X)$intensity
plot(density(X, 10))
plot(density(X, 50))
contour(density(X, 10), axes = FALSE)
Q <- quadratcount(X, nx = 4, ny = 3)
Q
plot(X)
plot(Q, add = TRUE, cex = 2)
K <- Kest(X)
plot(K)
E <- envelope(X, Kest, nsim = 39)
plot(E)
?ppm
fit <- ppm(X, ~1, Strauss(9))
fit
?ppm
fit <- ppm(X, ~1, Strauss(9))
fit
par(mfrow = c(1,2))
Xsim <- simulate(fit)
plot(X)
plot(Xsim)
names(X)
plot(X)
plot(Q, add = TRUE, cex = 20)
Q <- quadratcount(X, nx = 4, ny = 3)
Q
plot(X)
plot(Q, add = TRUE, cex = 20)
?ppm
fit <- ppm(X, ~1, Strauss(9))
fit
?install.packages
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
?install.packages
?installed.packages
rm(list=ls())
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = F, warn.conflicts=F)
}
packages<-("tidyverse", "ggplot2") # missing the
f.ipak(packages)
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
if (!is.character(pkg))
stop("list of packages must be a character vector.")
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])] #   installed.pacakges-> "Find (or retrieve) details of all packages installed in the specified libraries."
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F) #install.packages -> "Download and install packages from CRAN-like repositories or from local files."
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F) # calling require is also using base function
}
rm(list=ls())
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
if (!is.character(pkg))
stop("list of packages must be a character vector!.")
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])] #   installed.pacakges-> "Find (or retrieve) details of all packages installed in the specified libraries."
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F) #install.packages -> "Download and install packages from CRAN-like repositories or from local files."
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F) # calling require is also using base function
}
packages<-c("tidyverse", "ggplot2")
f.ipak(packages)
packages<-("tidyverse", "ggplot2") # incorrelcy
f.ipak(packages)
rm(list=ls())
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
if (!is.character(pkg))
stop("list of packages must be a character vector!.")
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])] #   installed.pacakges-> "Find (or retrieve) details of all packages installed in the specified libraries."
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F) #install.packages -> "Download and install packages from CRAN-like repositories or from local files."
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F) # calling require is also using base function
}
packages<-("tidyverse", "ggplot2") # incorrelcy
f.ipak(packages)
packages<-c(1, 2) # not a character vector
f.ipak(packages)
ciao <- function (x) {
if (x = 0) salutation) <- "Buongiorno!" else
else
(salutation) <- "Arrivederci!"
}
ciao <- function (x) {
if (x = 0) (salutation) <-  "Buongiorno!" else
else
(salutation) <- "Arrivederci!"
}
ciao <- function (x) {
if (x = 0) (salutation) <-  ("Buongiorno!") else
else
(salutation) <- ("Arrivederci!")
}
ciao <- function (x) {
if (x = 0) (salutation) <-  ("Buongiorno!") else
else
(salutation) <- ("Arrivederci!")
print(salutation)
}
ciao <- function (x) {
if (x = 0) (salutation) <-  ("Buongiorno!") else
(salutation) <- ("Arrivederci!")
print(salutation)
}
ciao <- function (x) {
if (x = 0) (salutation) <-  ("Buongiorno!") else{
(salutation) <- ("Arrivederci!")}
print(salutation)
}
ciao <- function (x) {
if (x = 0) (salutation) <-  ("Buongiorno!") else{
(salutation) <- ("Arrivederci!")}
}
ciao <- function (x) {
if (x = 0)
{salutation <-  "Buongiorno!"} else{
salutation <- "Arrivederci!"}
print(saltation)
}
ciao <- function (x) {
if (x = 0)
{salutation <-  "Buongiorno!"
} else {
salutation <- "Arrivederci!"}
print(saltation)
}
ciao <- function(x){
if (x = 0)
{salutation <-  "Buongiorno!"
} else {
salutation <- "Arrivederci!"}
print(saltation)
}
ciao <- function(x){
if (x = 0){
salutation <-"Buongiorno!"
} else {
salutation <-"Arrivederci!"}
print(salutation)
}
ciao <- function(x){
if (x = 0){
salutation <-"Buongiorno!"
} else {
salutation <-"Arrivederci!"}
}
if(x > 0){
print("Non-negative number")
} else {
print("Negative number")
}
x<-2
if(x > 0){
print("Non-negative number")
} else {
print("Negative number")
}
salutation<-vector("character")
str(salutation)
ciao <- function(x){
salutation<-vector("character")
if (x = 0){
salutation<-"Buongiorno!"
} else{
salutation <-"Arrivederci!"}
}
salutation<-vector("character")
if (x = 0){
salutation<-"Buongiorno!"
} else{
salutation <-"Arrivederci!"}
if (x = 0){
salutation<-"Buongiorno!"
} else{
salutation <-"Arrivederci!"
}
if (x = 0){
salutation<-"Buongiorno!"
} else {
salutation <-"Arrivederci!"
}
x<-0
if (x = 0){
salutation<-"Buongiorno!"
}
if (x = 0){salutation<-"Buongiorno!"}
if(x = 0){salutation<-"Buongiorno!"}
if(x = 0){
salutation<-"Buongiorno!"}
if(x = 0){
salutation<-("Buongiorno!")}
if(x = 0){salutation<-("Buongiorno!")}
ciao <- function(x){if (x = 0) {salutation <- "Buongiorno!"} else {salutation <- "Arrivederci!"} print(salutation)}
ciao <- function(x){if(x = 0) {salutation <- "Buongiorno!"} else {salutation <- "Arrivederci!"} print(salutation)}
ciao <- function(x){if(x = 0) salutation <- "Buongiorno!" else salutation <- "Arrivederci!" print(salutation)}
ciao <- function(x) {if(x = 0) salutation <- "Buongiorno!" else salutation <- "Arrivederci!" print(salutation)}
x <- -5
if(x > 0){
print("Non-negative number")
} else {
print("Negative number")
}
packages<-c("messyverse", "ggplot300")
f.ipak(packages)
x<--3
if (x < 0) {
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
ciao <- function(x){
if (x = 0) {
salutation <-  "Buongiorno!"
} else (!x=0 {
salutation <-  "Arrivederci!"}
return(salutation)
}
salutation<-vector("character")
if (x = 0){
salutation<-"Buongiorno!"
} else{
salutation <-"Arrivederci!"}
}
x<-2
if(x > 0){
print("Non-negative number")
} else {
print("Negative number")
}
salutation<-vector("character")
x<-0
salutation<-vector("character")
if(x = 0){salutation<-("Buongiorno!")}
ciao <- function(x) {if(x = 0) salutation <- "Buongiorno!" else salutation <- "Arrivederci!" print(salutation)}
ciao <- function(x){
if (x = 0) {
salutation <-  "Buongiorno!"
}
else if (x< 0) {
salutation <-  "Arrivederci!"
}
else (x > 0 ){
salutation <-  "Adios!"
}
return(salutation)
}
ciao <- function(x){
salutation<-vector("character")
if (x = 0) {
salutation <-  "Buongiorno!"
}
else if (x< 0) {
salutation <-  "Arrivederci!"
}
else (x > 0 ){
salutation <-  "Adios!"
}
return(salutation)
}
str(t2)
rm(list=ls())
wd<-"/home/brandon/labserv/Personal/Brandon/working_directory/wd_tomales_2019"
setwd(wd)
readRDS("t2.RDS")
t2<-readRDS("t2.RDS")
str(t2)
t2[1]
29+50
f.50<-function(x){x<-x[c(29:79),]}
t3<-lapply(t2, f.50)
t3
names(t3)<-c("Depth 0m", "Depth 1m", "Depth 2m", "Depth 3m")
for(i in 1:length(t3)){plot(t3[[i]], main=names(t3)[i])}
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])] #   installed.pacakges-> "Find (or retrieve) details of all packages
installed in the specified libraries."
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])] #   installed.pacakges-> "Find (or retrieve) details of all packages installed in the specified libraries."
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F) #install.packages -> "Download and install packages from CRAN-like #repositories or from local files."
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F) # calling require is also using base function
}
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])] #   installed.pacakges-> "Find (or retrieve) details of all packages installed in the specified libraries."
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F) #install.packages -> "Download and install packages from CRAN-like #repositories or from local files."
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F) # calling require is also using base function
}
