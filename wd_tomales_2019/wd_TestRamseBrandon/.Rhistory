plot(var.ele, main="elevation variogram", col="black", pch=24, cex=3, add=T)
plot(var.cop, main="copper variogram", col ="gold", pch=19, cex=3)
plot(var.ele, main="elevation variogram", col="black", pch=24, cex=3, add=T)
var.ele<-variog(ele.g)
plot(var.cop, main="copper variogram", col ="gold", pch=19, cex=3)
plot(var.ele, main="elevation variogram", col="black", pch=24, cex=3, add=T)
par(mfrow=c(2,1))
plot(var.cop, main="copper variogram", col ="gold", pch=19, cex=3)
plot(var.ele, main="elevation variogram", col="black", pch=24, cex=3)
dev.off()
par(mfrow=c(1,2))
plot(var.cop, main="copper variogram", col ="gold", pch=19, cex=3)
plot(var.ele, main="elevation variogram", col="black", pch=24, cex=3)
dev.off()
par(mfrow=c(1,2))
plot(var.cop, main="copper variogram", col ="gold", pch=19, cex=3)
plot(var.ele, main="elevation variogram", pch=24, cex=3)
plot(var.ele, main="elevation variogram", pch=24, cex=3, bg="black")
plot(var.cop, main="copper variogram", col ="gold", pch=19, cex=3)
dev.off()
par(mfrow=c(1,2))
plot(var.cop, main="copper omnidirectional variogram", col ="gold", pch=19, cex=3)
plot(var.ele, main="elevation ominidirectional variogram", pch=24, cex=3, bg="black")
dvar.cop<-variog4(cop.g)
dvar.ele<-variog4(cop.g)
dev.off()
plot(dvar.cop, main="copperDirectional variogram", col ="gold", pch=19, cex=3)
dev.off()
plot(dvar.cop, main="copperDirectional variogram")
plot(dvar.ele, main="elevation Directional variogram" )
dev.off()
par(mfrow=c(1,2))
plot(dvar.cop, main="copperDirectional variogram")
plot(dvar.ele, main="elevation Directional variogram" )
dvar.ele<-variog4(ele.g)
plot(dvar.ele, main="elevation Directional variogram" )
dev.off()
plot(dvar.cop, main="copperDirectional variogram")
plot(dvar.ele, main="elevation Directional variogram" )
dev.off()
par(mfrow=c(1,2))
plot(var.cop, main="copper omnidirectional variogram", col ="gold", pch=19, cex=3)
plot(var.ele, main="elevation ominidirectional variogram", pch=24, cex=3, bg="black")
dev.off()
par(mfrow=c(1,2))
plot(dvar.cop, main="copperDirectional variogram")
plot(dvar.ele, main="elevation Directional variogram" )
ev.off()
par(mfrow=c(1,2))
plot(dvar.cop, title="copperDirectional variogram")
plot(dvar.ele, title="elevation Directional variogram" )
plot(dvar.cop, sub="copperDirectional variogram" )
plot(dvar.cop, mtext="copperDirectional variogram" )
dev.off()
par(mfrow=c(1,2))
plot(dvar.cop)
mtext="copperDirectional variogram"
plot(dvar.ele, title="elevation Directional variogram" )
dev.off()
par(mfrow=c(1,2))
plot(dvar.cop, ylab="copper semivariance")
dev.off()
par(mfrow=c(1,2))
plot(dvar.cop, ylab="Copper Directional semivariance")
plot(dvar.ele, ylab="Elevation Directional semivariance")
??cov.spatial
m.c.<- variofit(var.cop, cov.model="spherical")
cop.cov <- krige.conv(cop.g,  krige=krige.control(obj.m = m.c))
m.c.<- variofit(var.cop, cov.model="spherical")
cop.cov <- krige.conv(cop.g,  krige=krige.control(obj.m = m.c))
dev.off()
par(mfrow=c(1,2))
plot(dvar.cop, ylab="Copper Directional semivariance")
plot(dvar.ele, ylab="Elevation Directional semivariance")
m.c.<- variofit(var.cop, cov.model="spherical", nugget =250 )
plot(var.cop, main="copper omnidirectional variogram", col ="gold", pch=19, cex=3)
m.c.<- variofit(var.cop, ini=c(250,700) cov.model="spherical", nugget =250 )
m.c.<- variofit(var.cop, ini=c(250,700), cov.model="spherical", nugget =250 )
plot(var.ele, main="elevation ominidirectional variogram", pch=24, cex=3, bg="black")
m.e <- variofit(var.cop, ini=c(1,2), cov.model="spherical", nugget =.7)
m.e <- variofit(var.cop, ini=c(1,2), cov.model="spherical", nugget =1)
cop.cov <- krige.conv(cop.g,  krige=krige.control(obj.m = m.c))
cop.cov <- krige.conv(cop.g, coords=cop.g$coords, krige=krige.control(obj.m = m.c))
cop.cov <- krige.conv(cop.g, loc=cop.g, krige=krige.control(obj.m = m.c))
str(cop.g)
cop.cov <- krige.conv(cop.g, loc=meuse@coords, krige=krige.control(obj.m = m.c))
m.c.<- variofit(var.cop, ini=c(250,700), cov.model="spherical", nugget =250 )
cop.cov <- krige.conv(cop.g, loc=meuse@coords, krige=krige.control(obj.m = m.c))
cop.cov <- krige.conv(cop.g, loc=meuse@coords, obj.m = m.c)
meuse@bbox
181390-178605
loc-
cop.cov <- krige.conv(cop.g, loc=meuse@coords, obj.model = m.c)
str(mc)
m.c<- variofit(var.cop, ini=c(250,700), cov.model="spherical", nugget =250 )
loc-
cop.cov <- krige.conv(cop.g, loc=meuse@coords, obj.model = m.c)
meuse@bbox[1]
meuse@bbox[2]
meuse@bbox[1,1]
meuse@bbox[3]
x<-seq(meuse@bbox[1],meuse@bbox[3],10)
y<-seq(meuse@bbox[2],meuse@bbox[4],10)
d1 <- expand.grid(x=x,y=y)
cop.cov <- krige.conv(cop.g, loc=d1, obj.model = m.c)
cop.cov <- krige.conv(cop.g, loc=d1, krige=krige.control(obj.m = m.c))
plot(cop.conv,loc=d1,values=cop.g.conv$predict,
main="Conventional kriging")
plot(cop.cov,loc=d1,values=cop.g.conv$predict,
main="Conventional kriging")
cop.cov <- krige.conv(cop.g, loc=cop.g, krige=krige.control(obj.m = m.c))
cop.cov <- krige.conv(cop.g, loc=meuse@coords, krige=krige.control(obj.m = m.c))
plot(cop.cov,loc=d1,values=cop.g.conv$predict,
main="Conventional kriging")
x<-seq(meuse@bbox[1],meuse@bbox[3],1)
y<-seq(meuse@bbox[2],meuse@bbox[4],1)
d1 <- expand.grid(x=x,y=y)
cop.cov <- krige.conv(cop.g, loc=meuse@coords, krige=krige.control(obj.m = m.c))
plot(cop.cov,loc=d1,values=cop.g.conv$predict,
main="Conventional kriging")
plot(cop.cov)
plot(cop.cov,values=cop.g.conv$predict,
main="Conventional kriging")
plot(cop.cov,values=cop.g, cov$predict,
main="Conventional kriging")
plot(cop.cov,values=cop.g, cop.cov$predict,
main="Conventional kriging")
plot(cop.cov,values=cop.g, loc=d1, cop.cov$predict,
main="Conventional kriging")
d1
x<-seq(meuse@bbox[1],meuse@bbox[3],100)
y<-seq(meuse@bbox[2],meuse@bbox[4],100)
d1 <- expand.grid(x=x,y=y)
cop.cov <- krige.conv(cop.g, loc=meuse@coords, krige=krige.control(obj.m = m.c))
plot(cop.cov,values=cop.g, loc=d1, cop.cov$predict, main="Conventional kriging")
plot(cop.cov)
?expand.grid
rm(list=ls())
## require packages
require(tidyverse)
require(lubridate)
require(stringr)
require(tools)
# set working directory
#setwd("Z:\\Cade\\Test\\TestRamseBrandon")
setwd("Z:\\Personal\\Brandon\\working_directory\\TestRamseBrandon")
rDir <- "./DataLogTribox95A7"
# 2) List of all Ramses Files
dirL <- list.files(rDir, full.names = T, recursive = T)
#### OUTPUT FILES ####
#### USER DEFINED FUNCTIONS ####
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####             END USER DEFINED VARIABLES        ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtF <- dirL[6]
# readlines
rtDat <- readLines(rtF)
specStart2 <- grep('^\\[Spectrum\\]',rtDat)
# spectrum end
specEnd2 <- grep('\\[END\\] of \\[Spectrum\\]',rtDat)
augDat <-NULL
for (i in 1:length(specStart2)){
specStart <- specStart2[i] #i
specEnd <- specEnd2[i] #i
# read in all of data for particular sample
dat1 <- rtDat[specStart:specEnd]
### Attributes Indexing ###
atStart <- grep('^\\[Attributes\\]',dat1)
atEnd <- grep('\\[END\\] of \\[Attributes\\]',dat1)
### Data Indexing ###
datStart <- grep('^\\[DATA\\]',dat1)
datEnd <- grep('\\[END\\] of \\[DATA\\]',dat1)
### Subset Data by Information ###
# read in ancillary data (specdata)
ancil <- rtDat[(specStart + 1):(atStart - 1)]
# read in attribute data
attr <- rtDat[(atStart + 1):(atEnd - 1)]
### Read in Spectral data ###
library(reshape)
# create matrix of rows Length 9r
dat2<-dat1[(datStart + 2):(datEnd - 1)]
b<-matrix( NA, nrow=length(dat2), ncol=4)
apply()
for (j in length(dat2)){
b[j,]<-t4[1:4]
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
t4<-as.numeric(t3[[1]][2:5])
}
return(b)}
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
x<-as.numeric(t3[[1]][2:5])
for (j in length(dat2)){
b[j,]<-x}}
test2<-read_delim(rtF, skip = (datStart + 2), n_max = (datEnd - 1), col_names = F, delim = " ")
test<-suppressWarnings(read_delim(rtF, skip = (datStart + 2), n_max = (datEnd - 1), col_names = F, delim = " "))
test2<-suppressWarnings(read_delim(rtF, skip = (datStart + 1), n_max = (datEnd - 1), col_names = F, delim = " ") %>% select(.,2,3,4,5))
trioSpec <- suppressWarnings(read_delim(rtF, skip = (datStart + ), n_max = (datEnd - 1), col_names = F, delim = " ") %>%
select(.,2,3,4,5) %>%
setNames(c("wavelength", "intensity","error","status")))
### Oranize ancilliary information and add to Spectral data ###
ancilAll <- c(ancil,attr)
ancilCol <- str_trim(str_extract(as.character(unlist(ancilAll)), "^.*(?=( =))"))
ancilVal <- str_trim(str_extract(as.character(unlist(ancilAll)), "(?<=(= )).*$"))
names(ancilVal) <- ancilCol
atm <- data.frame(as.list(ancilVal)) %>% slice(rep(1:n(), each = nrow(trioSpec)))
# organized dataframe
orgDat <- bind_cols(trioSpec,atm)
# append new dataset
augDat <- bind_rows(augDat,orgDat)
}
rtDat <- readLines(rtF)
specStart2 <- grep('^\\[Spectrum\\]',rtDat)
# spectrum end
specEnd2 <- grep('\\[END\\] of \\[Spectrum\\]',rtDat)
augDat <-NULL
specStart <- specStart2[3] #i
specEnd <- specEnd2[3] #i
# read in all of data for particular sample
dat1 <- rtDat[specStart:specEnd]
### Attributes Indexing ###
atStart <- grep('^\\[Attributes\\]',dat1)
atEnd <- grep('\\[END\\] of \\[Attributes\\]',dat1)
### Data Indexing ###
datStart <- grep('^\\[DATA\\]',dat1)
datEnd <- grep('\\[END\\] of \\[DATA\\]',dat1)
### Subset Data by Information ###
# read in ancillary data (specdata)
ancil <- rtDat[(specStart + 1):(atStart - 1)]
# read in attribute data
attr <- rtDat[(atStart + 1):(atEnd - 1)]
dat2<-dat1[(datStart + 2):(datEnd - 1)]
b<-matrix( NA, nrow=length(dat2), ncol=4)
dim(b)
b
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
x<-as.numeric(t3[[1]][2:5])
for (j in length(dat2)){
b[j,]=x}}
b
b[255,]
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
x<-as.numeric(t3[[1]][2:5])
b[i,]=x}
b
b[255,]
b=null
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
x<-as.numeric(t3[[1]][2:5])
b= rbind(b, data.frame(x))}
x
b=null
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
b= rbind(b, data.frame(as.numeric(t3[[1]][2:5])))}
b=null
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
b= rbind(b, data.frame(c(as.numeric(t3[[1]][2:5])))}
b=null
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
b= rbind(b, data.frame(c(as.numeric(t3[[1]][2:5]))))}
t3
x
b=null
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
b= rbind(b, data.frame(c(x)))}
b=null
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
x<-as.numeric(t3[[1]][2:5])
b= rbind(b, data.frame(c(x)))}
dim(x)
x
b=null
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
w<-as.numeric(t3[[1]][2])
x<-as.numeric(t3[[1]][3])
y<-as.numeric(t3[[1]][4])
z<-as.numeric(t3[[1]][5])
b= rbind(b, data.frame(w,x,y,z))}
b
b=null
b=NULL
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
w<-as.numeric(t3[[1]][2])
x<-as.numeric(t3[[1]][3])
y<-as.numeric(t3[[1]][4])
z<-as.numeric(t3[[1]][5])
b= rbind(b, data.frame(w,x,y,z))}
b
b=NULL
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
w<-as.numeric(t3[[1]][2])
x<-as.numeric(t3[[1]][3])
y<-as.numeric(t3[[1]][4])
z<-as.numeric(t3[[1]][5])
b= rbind(b, data.frame(w,x,y,z))
return(b)}
b
b<-matrix( NA, nrow=length(dat2), ncol=4)
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
w<-as.numeric(t3[[1]][2])
x<-as.numeric(t3[[1]][3])
y<-as.numeric(t3[[1]][4])
z<-as.numeric(t3[[1]][5])
b[i,]=c(w,x,y,z)
}
b
b[255]
b[255,]
b<-matrix( NA, nrow=length(dat2), ncol=4)
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
w<-as.numeric(t3[[1]][2])
x<-as.numeric(t3[[1]][3])
y<-as.numeric(t3[[1]][4])
z<-as.numeric(t3[[1]][5])
b[i,]=c(w,x,y,z)
return(b)
}
b
b<-matrix( NA, nrow=length(dat2), ncol=4)
for (j in length(dat2))
{b[j,]=c(w,x,y,z)
for (i in length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
w<-as.numeric(t3[[1]][2])
x<-as.numeric(t3[[1]][3])
y<-as.numeric(t3[[1]][4])
z<-as.numeric(t3[[1]][5])
}
}
b
b<-matrix( NA, nrow=length(dat2), ncol=4)
for (i in 1:length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
x<-as.numeric(t3[[1]][2:5])
for (j in length(dat2)){
b[j,]=x}}
b
b[255,]
for (j in 1:length(dat2))
{b[j,]=c(w,x,y,z)
for (i in 1:length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
w<-as.numeric(t3[[1]][2])
x<-as.numeric(t3[[1]][3])
y<-as.numeric(t3[[1]][4])
z<-as.numeric(t3[[1]][5])
}
}
for (i in 1:length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
x<-as.numeric(t3[[1]][2:5])
b[i,]=x}}
for (i in 1:length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
x<-as.numeric(t3[[1]][2:5])
b[i,]=x}
b
names(b)<-c("wavelength", "intensity","error","status")
m(list=ls())
## require packages
require(tidyverse)
require(lubridate)
require(stringr)
require(tools)
# set working directory
#setwd("Z:\\Cade\\Test\\TestRamseBrandon")
setwd("Z:\\Personal\\Brandon\\working_directory\\TestRamseBrandon")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####             START USER DEFINED VARIABLES       ####
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The following variables should be defined by the user each time.
#### INPUT FILES ####
# 1) Directory where all the Ramses data live
rDir <- "./DataLogTribox95A7"
# 2) List of all Ramses Files
dirL <- list.files(rDir, full.names = T, recursive = T)
for (i in length(rtF)){
# dir
# readlines
rtDat <- readLines(rtF)
specStart2 <- grep('^\\[Spectrum\\]',rtDat)
# spectrum end
specEnd2 <- grep('\\[END\\] of \\[Spectrum\\]',rtDat)
augDat <-NULL
for (i in 1:length(specStart2)){
specStart <- specStart2[i] #i
specEnd <- specEnd2[i] #i
# read in all of data for particular sample
dat1 <- rtDat[specStart:specEnd]
### Attributes Indexing ###
atStart <- grep('^\\[Attributes\\]',dat1)
atEnd <- grep('\\[END\\] of \\[Attributes\\]',dat1)
### Data Indexing ###
datStart <- grep('^\\[DATA\\]',dat1)
datEnd <- grep('\\[END\\] of \\[DATA\\]',dat1)
### Subset Data by Information ###
# read in ancillary data (specdata)
ancil <- rtDat[(specStart + 1):(atStart - 1)]
# read in attribute data
attr <- rtDat[(atStart + 1):(atEnd - 1)]
### Read in Spectral data ###
dat2<-dat1[(datStart + 2):(datEnd - 1)]
b<-matrix( NA, nrow=length(dat2), ncol=4)
for (i in 1:length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
x<-as.numeric(t3[[1]][2:5])
b[i,]=x}
names(b)<-c("wavelength", "intensity","error","status")
trioSpec<-b
rm(b, dat2)
#trioSpec <- suppressWarnings(read_delim(rtF, skip = (datStart + ), n_max = (datEnd - 1), col_names = F, delim = " ") %>% select(.,2,3,4,5) %>% setNames(c("wavelength", "intensity","error","status")))
### Oranize ancilliary information and add to Spectral data ###
ancilAll <- c(ancil,attr)
ancilCol <- str_trim(str_extract(as.character(unlist(ancilAll)), "^.*(?=( =))"))
ancilVal <- str_trim(str_extract(as.character(unlist(ancilAll)), "(?<=(= )).*$"))
names(ancilVal) <- ancilCol
atm <- data.frame(as.list(ancilVal)) %>% slice(rep(1:n(), each = nrow(trioSpec)))
# organized dataframe
orgDat <- bind_cols(trioSpec,atm)
# append new dataset
augDat <- bind_rows(augDat,orgDat)
}
m <- (rtF)
}
atm
rm(list=ls())
## require packages
require(tidyverse)
require(lubridate)
require(stringr)
require(tools)
# set working directory
#setwd("Z:\\Cade\\Test\\TestRamseBrandon")
setwd("Z:\\Personal\\Brandon\\working_directory\\TestRamseBrandon")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####             START USER DEFINED VARIABLES       ####
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The following variables should be defined by the user each time.
#### INPUT FILES ####
# 1) Directory where all the Ramses data live
rDir <- "./DataLogTribox95A7"
# 2) List of all Ramses Files
dirL <- list.files(rDir, full.names = T, recursive = T)
#### OUTPUT FILES ####
#### USER DEFINED FUNCTIONS ####
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####             END USER DEFINED VARIABLES        ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtF <- dirL[6]
for (i in length(rtF)){
# dir
# readlines
rtDat <- readLines(rtF)
specStart2 <- grep('^\\[Spectrum\\]',rtDat)
# spectrum end
specEnd2 <- grep('\\[END\\] of \\[Spectrum\\]',rtDat)
augDat <-NULL
for (i in 1:length(specStart2)){
specStart <- specStart2[i] #i
specEnd <- specEnd2[i] #i
# read in all of data for particular sample
dat1 <- rtDat[specStart:specEnd]
### Attributes Indexing ###
atStart <- grep('^\\[Attributes\\]',dat1)
atEnd <- grep('\\[END\\] of \\[Attributes\\]',dat1)
### Data Indexing ###
datStart <- grep('^\\[DATA\\]',dat1)
datEnd <- grep('\\[END\\] of \\[DATA\\]',dat1)
### Subset Data by Information ###
# read in ancillary data (specdata)
ancil <- rtDat[(specStart + 1):(atStart - 1)]
# read in attribute data
attr <- rtDat[(atStart + 1):(atEnd - 1)]
### Read in Spectral data ###
dat2<-dat1[(datStart + 2):(datEnd - 1)]
b<-matrix( NA, nrow=length(dat2), ncol=4)
for (i in 1:length(dat2)){
t3<-strsplit(dat2[i], split = " ", fixed=F)
x<-as.numeric(t3[[1]][2:5])
b[i,]=x}
names(b)<-c("wavelength", "intensity","error","status")
trioSpec<-b
rm(b, dat2, t3)
#trioSpec <- suppressWarnings(read_delim(rtF, skip = (datStart + ), n_max = (datEnd - 1), col_names = F, delim = " ") %>% select(.,2,3,4,5) %>% setNames(c("wavelength", "intensity","error","status")))
### Oranize ancilliary information and add to Spectral data ###
ancilAll <- c(ancil,attr)
ancilCol <- str_trim(str_extract(as.character(unlist(ancilAll)), "^.*(?=( =))"))
ancilVal <- str_trim(str_extract(as.character(unlist(ancilAll)), "(?<=(= )).*$"))
names(ancilVal) <- ancilCol
atm <- data.frame(as.list(ancilVal)) %>% slice(rep(1:n(), each = nrow(trioSpec)))
# organized dataframe
orgDat <- bind_cols(trioSpec,atm)
# append new dataset
augDat <- bind_rows(augDat,orgDat)
}
m <- (rtF)
}
names(atm)
